services:
  app-boilerplate:
    image: app-boilerplate:prod
    container_name: app-boilerplate.prod
    build:
      context: ./app
    ports:
      - 80:3000
    env_file:
      - .env.prod
    working_dir: /app
    command: sh -c "node build/index.js"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      app-boilerplate.db.prod:
        condition: service_healthy
    networks:
      - app-boilerplate.network
      - app-boilerplate.internal
    

  app-boilerplate.db.prod:
    image: postgres:17
    container_name: app-boilerplate.db.prod 
    env_file:
      - .env.prod
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.prod.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-boilerplate.internal
  
  app-boilerplate.migrate:
    image: app-boilerplate-migrate:prod
    container_name: app-boilerplate.migrate
    build:
      context: ./app
      dockerfile: Dockerfile.migrate
    env_file:
      - .env.prod
    depends_on:
      app-boilerplate.db.prod:
        condition: service_healthy
    networks:
      - app-boilerplate.internal

networks:
  app-boilerplate.network:
    name: app-boilerplate.network
    driver: bridge
  app-boilerplate.internal:
    name: app-boilerplate.internal
    driver: bridge
    internal: true

volumes:
  db_data:
    driver: local
    name: app-boilerplate.db.prod
